---
 - name: Check if RDS instance already created and get facts.
   local_action:
     module: rds
     command: facts
     instance_name: "{{ rds.rds_instance_name }}"
     region: "{{ aws.region }}"
   register: rds_state
   ignore_errors: true

 - debug: msg="Successfully got facts from already created RDS instance"
   when: rds_state|succeeded

 - name: Create RDS with Postgres DB.
   local_action:
     module: rds
     command: create
     instance_name: "{{ rds.rds_instance_name }}"
     db_engine: "{{ rds.db_engine }}"
     size: "{{ rds.size }}"
     instance_type: "{{ rds.instance_type }}"
     db_name: "{{ rds.db_name }}"
     username: "{{ rds.username }}"
     password: "{{ rds.password }}"
     region: "{{ rds.region }}"
     multi_zone: no
     port: 5432
     wait: yes
     wait_timeout: 3600
   when: rds_state|failed
   register: rds_state

 - name: Get RDS instance facts.
   local_action:
     module: rds
     command: facts
     instance_name: "{{ rds.rds_instance_name }}"
     region: "{{ aws.region }}"
   when: rds_state|succeeded
   register: rds_state

 - name: Get RDS endpoint.
   debug:
     msg: "RDS endpoint is --> {{ rds_state.instance.endpoint }}"


 - name: Setting environment variables.
   blockinfile:
     path: /root/.bashrc
     insertafter: "EOF"
     block: |
       export DB_HOST={{ rds_state.instance.endpoint }}
       export DB_NAME={{ rds.db_name }}
       export DB_USER={{ rds.username }}
       export DB_PASS={{ rds.password }}
     state: present
#   environment:
#     DB_HOST: "{{ rds_state.instance.endpoint }}"

 - name: Exporting environment variables.
   shell: . /root/.bashrc && echo {{ item }}
   args:
     executable: /bin/bash
   become: true
   with_items:
     - $DB_HOST
     - $DB_NAME
     - $DB_USER
     - $DB_PASSWORD

 - name: Create liquibase.properties file and add parameters.
   blockinfile:
     path: "{{env.liquibase_dir}}/liquibase.properties"
     create: yes
     owner: root
     group: root
     mode: 0755
     block: |
       driver: org.postgresql.Driver
       url: jdbc:postgresql://{{ rds_state.instance.endpoint }}:5432/{{ rds.db_name }}
       username: {{ rds.username }}
       password: {{ rds.password }}
       # specifies packages where entities are and database dialect, used for liquibase:diff command
       referenceUrl=hibernate:spring:academy.softserve.aura.core.entity?dialect=org.hibernate.dialect.PostgreSQL9Dialect
     state: present

 - name: Unarchive liquibase binaries to {{ env.liquibase_dir }}.
   unarchive: src={{ env.liquibase_dir }}/liquibase-3.5.3-bin.tar.gz dest={{ env.liquibase_dir }}/ copy=no creates={{ env.liquibase_dir }}/liquibase
   register: unarchive_liquibase

 - name: Populate Postgres DB with liquibase.
   shell: "{{ env.liquibase_dir }}/liquibase --defaultsFile={{ env.liquibase_dir }}/liquibase.properties --changeLogFile={{ env.liquibase_dir }}/changelogs/changelog-main.xml --classpath={{ env.liquibase_dir }}/postgresql-42.1.4.jar update"
   args:
     executable: /bin/bash
   when: unarchive_liquibase|succeeded

 - name: Start Java application.
   shell: "java -jar {{ env.project_dir }}/Samsara-1.3.5.RELEASE.jar > /dev/null 2&1 &"
   args:
     executable: /bin/bash
   environment:
     DB_HOST: "{{ rds_state.instance.endpoint }}"
     DB_NAME: "{{ rds.db_name }}"
     DB_USER: "{{ rds.username }}"
     DB_PASS: "{{ rds.password }}"
   register: app_state
   become: true

 - name: Wait for Java application to become available
   wait_for:
     port: 9000
     host: localhost
     delay: 60
   when: app_state|succeeded
   register: app_up

 - name: Check that you can connect (GET) to a page and it returns a status 200.
   uri:
     url: http://localhost:9000/login
   when: app_up|succeeded