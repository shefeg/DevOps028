pipeline {

    agent {
        label 'slave_1'
    }

    tools {
        maven "M3"
    }

    parameters {
        string(name: 'MAVEN_OPTS', defaultValue: '-Djava.awt.headless=true', description: 'Options for Maven')
        string(name: 'KOPS_CLUSTER_NAME', defaultValue: 'aikubernetes.k8s.local')
        string(name: 'KOPS_CLUSTER_S3_STATE', defaultValue: 's3://aikubernetes-k8s-local-state-store')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout(
                    [$class: 'GitSCM',
                    branches: [[name: '*/jenkins']], doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/shefeg/DevOps028.git']]]
                )
            }
        }

        stage('Build application') {
	        steps {
		        echo 'Compiling Project...'
		        sh "mvn -B dependency:resolve ${params.MAVEN_OPTS}"
		        sh "mvn clean compile -B ${params.MAVEN_OPTS}"
	        }
        }

		stage('Test and Package') {
			steps {
				echo 'Testing and Packaging Project..'
				sh "mvn package -B ${params.MAVEN_OPTS}"
			}
		}
		stage('Create Artifact') {
			steps {
			    archive 'target/*.jar'
			}
		}

		stage('Build and push Samsara ans Postgres images to AWS ECR') {
			steps {
				script {
				    app = docker.build("samsara", "-f Dockerfile.app .")
				    db = docker.build("postgresdb", "-f Dockerfile.db .")
				    docker.withRegistry("https://455022533484.dkr.ecr.us-east-1.amazonaws.com", "ecr:us-east-1:0ac74b53-e568-4b1a-bb1e-c125eda20097") {
				        app.push("latest")
				        db.push("latest")
				    }
				}
			}
		}

		stage('Restore Kubernetes cluster') {
			steps {
                sh "kops replace --name ${KOPS_CLUSTER_NAME} --state=${KOPS_CLUSTER_S3_STATE} -f kops-full-cluster.yaml"
                sh "kops update cluster --name ${KOPS_CLUSTER_NAME} --state=${KOPS_CLUSTER_S3_STATE} --yes"
			}
		}

		stage ('Wait for application to restore on cluster') {
		    steps {
		    sleep time: 5, unit: 'MINUTES'
		    }
		}

		stage('Check if application is reachable on the Loadbalancer') {
			steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh "until \$(curl -sSf http://`kubectl describe svc samsara | grep \"LoadBalancer Ingress:\" | cut -d':' -f2 | tr -d ' '`:9000/login > /dev/null); do sleep 10; done"
                }
			}
		}
	}
}