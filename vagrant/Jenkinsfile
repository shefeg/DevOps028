pipeline {

    agent none

    tools {
        maven "M3"
      }

    parameters {
        string(name: 'GIT', defaultValue: 'https://github.com/shefeg/DevOps028.git')
        string(name: 'MAVEN_OPTS', defaultValue: '-Djava.awt.headless=true', description: 'Options for Maven')
        string(name: 'INSTANCE_NAME', defaultValue: 'aidemo2')
        string(name: 'RDS_DB_ENGINE', defaultValue: 'postgres')
        string(name: 'RDS_SIZE', defaultValue: '5')
        string(name: 'RDS_INSTANCE_TYPE', defaultValue: 'db.t2.micro')
        string(name: 'AVAILABILITY_ZONE', defaultValue: 'us-east-1d')
        string(name: 'RDS_BACKUP_RETENTION', defaultValue: '0')
        string(name: 'DB_NAME', defaultValue: 'auradb')
        string(name: 'DB_USER', defaultValue: 'aura')
		string(name: 'EC2_AMI', defaultValue: 'ami-c425e5be')
		string(name: 'EC2_INSTANCE_TYPE', defaultValue: 't2.micro')
		string(name: 'SSH_KEYS', defaultValue: 't2.micro')
		string(name: 'SECURITY_GROUP_ID', defaultValue: 't2.micro')
    }

    stages {
        stage('Checkout') {
            steps {
                git ${params.GIT}
            }
        }

	    stage('Paralel') {
            parallel {
                stage('create_rds') {
				    agent {
                            label "slave-1"
                    }
                    steps {
                        sh "/usr/bin/aws rds create-db-instance --db-instance-identifier ${params.INSTANCE_NAME} --engine ${params.RDS_DB_ENGINE} --allocated-storage ${params.SIZE} --db-instance-class ${params.RDS_INSTANCE_TYPE} --db-name ${params.DB_NAME} --master-username ${params.DB_USER} --master-user-password ${DB_PASSWORD} --availability-zone ${params.AVAILABILITY_ZONE} --backup-retention-period ${params.RDS_BACKUP_RETENTION}"
                        sh "while [[  $(/usr/bin/aws rds describe-db-instances --db-instance-identifier ${params.INSTANCE_NAME} | grep "available" | cut -d':' -f2 | tr -d '", ') != "available"  ]]; do sleep 10; done && DB_HOST=$(/usr/bin/aws rds describe-db-instances --db-instance-identifier ${params.INSTANCE_NAME} | grep "Address" | cut -d':' -f2 | tr -d '", ')"
                    }
                }
			    stage('create_ec2') {
                    agent {
                            label "slave-2"
                    }
				    steps {
                        sh "/usr/bin/aws ec2 run-instances --image-id ${params.EC2_AMI} --count 1 --instance-type ${params.EC2_INSTANCE_TYPE} --key-name ${params.SSH_KEYS} --security-groups ${params.SECURITY_GROUP_ID}"
                        sh "while [[  $(/usr/bin/aws ec2 describe-instances --filters "Name=tag-value,Values=${params.INSTANCE_NAME}" | grep "16" | grep "Code" | cut -d':' -f2 | tr -d '", ') != "16"  ]]; do sleep 10; done
                    }
                }






            }
        }


        stage('Build') {
            steps {
                echo 'Compiling Project...'
                    sh "mvn -B dependency:resolve ${params.MAVEN_OPTS}"
                    sh "mvn clean compile -B ${params.MAVEN_OPTS}"
                }
        }

        stage('Test and Package') {
            steps {
                echo 'Testing and Packaging Project..'
                sh "mvn package -B ${params.MAVEN_OPTS}"
            }
        }
        stage('Results') {
            steps {
                archive 'target/*.jar'
            }
        }
    }
}